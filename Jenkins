pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'nodejs-23'           // Node.js installation in Jenkins
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        IMAGE_NAME = "signup"                    // Docker image name
        CONTAINER_NAME = "signup"                // Docker container name
        DOCKER_PASSWORD = "040705"               // Docker password
        TERRAFORM_VERSION = "1.3.5"              // Version of Terraform you want to use
    }

    stages {

        // üõ†Ô∏è Clone the Entire Repository
        stage('Checkout') {
            steps {
                script {
                    sh """
                    # Remove existing folder if exists
                    rm -rf Devops_Training

                    # Clone the entire repository
                    git clone https://github.com/VIBUDESH07/Devops_Training.git
                    """
                }
            }
        }

        // üì¶ Install Dependencies (Only from `Devops` folder)
        stage('Install Dependencies') {
            steps {
                dir('Devops_Training/Devops') {   // Navigate into the `Devops` folder
                    sh 'npm install'
                }
            }
        }

        // üî® Build the Vite App (Only from `Devops` folder)
        stage('Build') {
            steps {
                dir('Devops_Training/Devops') {   // Navigate into the `Devops` folder
                    sh 'npm run build'
                }
            }
        }

        // üê≥ Build Docker Image (Only from `Devops` folder)
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    cd Devops_Training/Devops    # Navigate into the `Devops` folder
                    echo '${DOCKER_PASSWORD}' | sudo -S docker build -t ${IMAGE_NAME} .
                    """
                }
            }
        }

        // üî• Stop and Remove Existing Container (if running)
        stage('Recreate or Create Container') {
            steps {
                script {
                    sh """
                    if sudo docker ps -a -q -f name=${CONTAINER_NAME}; then
                        echo "üî¥ Container ${CONTAINER_NAME} exists. Recreating..."
                        # Stop and remove the existing container
                        echo '${DOCKER_PASSWORD}' | sudo -S docker stop ${CONTAINER_NAME} || true
                        echo '${DOCKER_PASSWORD}' | sudo -S docker rm -f ${CONTAINER_NAME} || true
                    else
                        echo "üü¢ Container ${CONTAINER_NAME} does not exist. Creating a new one..."
                    fi

                    # Clean up dangling containers
                    echo "üßπ Cleaning up dangling containers..."
                    echo '${DOCKER_PASSWORD}' | sudo -S docker container prune -f
                    """
                }
            }
        }

        // üöÄ Run the Docker Container
        stage('Run Docker Container') {
            steps {
                script {
                    sh """
                    echo "üöÄ Starting container ${CONTAINER_NAME}..."
                    echo '${DOCKER_PASSWORD}' | sudo -S docker run -d -p 5000:80 --name ${CONTAINER_NAME} ${IMAGE_NAME}
                    """
                }
            }
        }

        // ‚úÖ Verify the Container is Running
        stage('Verify Container Running') {
            steps {
                script {
                    sh """
                    if sudo docker ps | grep -q ${CONTAINER_NAME}; then
                        echo "‚úÖ Container ${CONTAINER_NAME} is running successfully."
                    else
                        echo "‚ùå Failed to start container."
                        exit 1
                    fi
                    """
                }
            }
        }

        // üåç Initialize Terraform (Add Terraform Stage)
        stage('Terraform Init') {
            steps {
                script {
                    dir('Devops_Training/terraform') {  // Navigate to the Terraform directory
                        sh '''
                        # Initialize Terraform
                        terraform init
                        '''
                    }
                }
            }
        }

        // üìë Plan Terraform Deployment (Add Terraform Stage)
        stage('Terraform Plan') {
            steps {
                script {
                    dir('Devops_Training/terraform') {  // Navigate to the Terraform directory
                        sh '''
                        # Run Terraform Plan to preview the changes
                        terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        // ‚úÖ Apply Terraform Changes (Add Terraform Stage)
        stage('Terraform Apply') {
            steps {
                script {
                    dir('Devops_Training/terraform') {  // Navigate to the Terraform directory
                        sh '''
                        # Apply the Terraform plan to provision resources
                        terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }
    }
}
