pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'nodejs-23'           // Node.js installation in Jenkins
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        IMAGE_NAME = "frontend"                  // Docker image name
        CONTAINER_NAME = "frontend"              // Docker container name
        DOCKER_PASSWORD = "040705"               // Docker password
    }

    stages {
        // üõ†Ô∏è Checkout the repository
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: true]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/VIBUDESH07/SIH12.git']]
                ])
            }
        }

        // üì¶ Install dependencies
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        // üî® Build the React app
        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }

        // üê≥ Build Docker Image
        stage('Build Docker Image') {
            steps {
                script {
                    sh "echo '${DOCKER_PASSWORD}' | sudo -S docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        // üî• Stop and Remove Existing Container (if running)
        stage('Recreate or Create Container') {
            steps {
                script {
                    sh """
                    if sudo docker ps -a -q -f name=${CONTAINER_NAME}; then
                        echo "üî¥ Container ${CONTAINER_NAME} exists. Recreating..."
                        # Stop and remove the existing container
                        echo '${DOCKER_PASSWORD}' | sudo -S docker stop ${CONTAINER_NAME} || true
                        echo '${DOCKER_PASSWORD}' | sudo -S docker rm -f ${CONTAINER_NAME} || true
                    else
                        echo "üü¢ Container ${CONTAINER_NAME} does not exist. Creating a new one..."
                    fi

                    # Clean up dangling containers
                    echo "üßπ Cleaning up dangling containers..."
                    echo '${DOCKER_PASSWORD}' | sudo -S docker container prune -f
                    """
                }
            }
        }

        // üöÄ Run the Docker Container
        stage('Run Docker Container') {
            steps {
                script {
                    sh """
                    echo "üöÄ Starting container ${CONTAINER_NAME}..."
                    echo '${DOCKER_PASSWORD}' | sudo -S docker run -d -p 3001:80 --name ${CONTAINER_NAME} ${IMAGE_NAME}
                    """
                }
            }
        }

        // ‚úÖ Verify the Container is Running
        stage('Verify Container Running') {
            steps {
                script {
                    sh """
                    if sudo docker ps | grep -q ${CONTAINER_NAME}; then
                        echo "‚úÖ Container ${CONTAINER_NAME} is running successfully."
                    else
                        echo "‚ùå Failed to start container."
                        exit 1
                    fi
                    """
                }
            }
        }
    }
}
